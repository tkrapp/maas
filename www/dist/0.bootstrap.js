(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'maas'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\n\nconst WORKER = (new function () {\n    let self = this,\n        worker = new Worker('bootstrap.worker.js'),\n        callbacks = {};\n\n    self.postMessage = function (type, payload) {\n        return worker.postMessage({type, payload});\n    };\n    self.registerCallback = function (type, callback) {\n        let callbacksArray = callbacks[type] || [];\n\n        callbacksArray.push(callback);\n\n        callbacks[type] = callbacksArray;\n    };\n\n    function routeMessage(evt) {\n        let {type, payload} = evt.data;\n\n        (callbacks[type] || []).forEach(function (callback) {\n            callback(type, payload);\n        });\n    }\n    worker.addEventListener('message', routeMessage);\n}());\n\nconst MAASConsole = (new function () {\n    let self = this,\n        consoleElement = document.querySelector('#maas-console');\n\n    self.log = function (message) {\n        let logEntry = document.createElement('li'),\n            nowDate = new Date(),\n            now = `${nowDate.getFullYear()}-${nowDate.getMonth() + 1}-${nowDate.getDate()} ${nowDate.getHours()}:${nowDate.getMinutes()}:${nowDate.getSeconds()}`;\n\n        logEntry.innerHTML = `${now} - ${message}`;\n        logEntry.classList.add('list-group-item');\n\n        consoleElement.appendChild(logEntry);\n    };\n\n    function routeMessage(type, payload) {\n        let {fn, args} = payload;\n\n        self[fn](...args);\n    }\n    WORKER.registerCallback('maas_console', routeMessage);\n}());\n\ndocument.querySelector('#generate-markov-btn').addEventListener('click', function () {\n    let fileList = document.querySelector('#input-text').files,\n        reader = new FileReader();\n\n    reader.addEventListener('load', function (evt) {\n        WORKER.postMessage('generate_markov', evt.target.result);\n    });\n\n    reader.readAsText(fileList[0]);\n});\n\ndocument.querySelector('#generate-text-btn').addEventListener('click', function() {\n    let numberOfWords = parseInt(document.querySelector('#number-of-words').value, 10);\n\n    WORKER.postMessage('generate_text', numberOfWords);\n});\n\ndocument.querySelector('#input-text').addEventListener('change', function() {\n    document.querySelector('#generate-text-btn').disabled = true;\n});\n\ndocument.querySelectorAll('.srv-resource').forEach(function (element) {\n    async function loadResource(evt) {\n        let url = evt.target.getAttribute('data-href'),\n            response = await fetch(url);\n\n        WORKER.postMessage('generate_markov', await response.text());\n    }\n\n    element.addEventListener('click', loadResource);\n});\n\nWORKER.registerCallback('generate_text', function (_type, payload) {\n    document.querySelector('#generate-text-output').innerHTML = payload.replace(/\\n/g, '<br />\\n');\n});\n\nWORKER.registerCallback('generate_markov', function (_type, payload) {\n    document.querySelector('#generate-text-btn').disabled = false;\n});\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);