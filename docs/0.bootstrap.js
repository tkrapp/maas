(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const WORKER = (new function () {\n    let self = this,\n        worker = new Worker('bootstrap.worker.js'),\n        callbacks = {};\n\n    self.postMessage = function (type, payload) {\n        return worker.postMessage({type, payload});\n    };\n    self.registerCallback = function (type, callback) {\n        let callbacksArray = callbacks[type] || [];\n\n        callbacksArray.push(callback);\n\n        callbacks[type] = callbacksArray;\n    };\n    self.removeCallback = function (type, callback) {\n        let callbacksArray = callbacks[type] || [];\n\n        callbacks[type] = callbacksArray.filter((fn) => fn !== callback);\n    };\n\n    function routeMessage(evt) {\n        let {type, payload} = evt.data;\n\n        (callbacks[type] || []).forEach(function (callback) {\n            callback(type, payload);\n        });\n    }\n    worker.addEventListener('message', routeMessage);\n}());\n\nconst MAAS_CONSOLE = (new function () {\n    let self = this,\n        consoleElement = document.querySelector('#maas-console');\n\n    self.log = function (message) {\n        let logEntry = document.createElement('li'),\n            nowDate = new Date();\n\n        logEntry.innerHTML = `${formatDate(nowDate)} - ${message}`;\n        logEntry.classList.add('list-group-item');\n        consoleElement.insertBefore(logEntry, consoleElement.firstChild);\n\n        setTimeout(function () {\n            logEntry.classList.add('show');\n        }, 100);\n    };\n\n    function routeMessage(type, payload) {\n        let {fn, args} = payload;\n\n        self[fn](...args);\n    }\n    WORKER.registerCallback('maas_console', routeMessage);\n\n    function formatDate(theDate) {\n        return [\n            [\n                theDate.getFullYear(),\n                formatNumber(theDate.getMonth() + 1, 2, '0'),\n                formatNumber(theDate.getDate(), 2, '0')\n            ].join('-'),\n            [\n                formatNumber(theDate.getHours(), 2, '0'),\n                formatNumber(theDate.getMinutes(), 2, '0'),\n                formatNumber(theDate.getSeconds(), 2, '0')\n            ].join(':')\n        ].join(' ');\n    }\n\n    function formatNumber(num, fieldLength, fillChar) {\n        fieldLength = fieldLength || 0;\n        fillChar = fillChar.toString() || '';\n\n        if (fieldLength === 0 && fillChar === '') {\n            return num.toString();\n        }\n\n        num = num.toString();\n        if (num.length < fieldLength) {\n            return `${fillChar.repeat(fieldLength - num.length)}${num}`;\n        }\n\n        return num;\n    }\n}());\n\ndocument.querySelector('#generate-markov-btn').addEventListener('click', function (evt) {\n    let file = document.querySelector('#input-text').files[0],\n        reader = new FileReader(),\n        button = evt.target,\n        spinner = button.querySelector('span');\n\n    if (file === undefined) {\n        MAAS_CONSOLE.log('No file selected');\n        return;\n    }\n\n    button.disabled = true;\n    spinner.classList.add('show');\n\n    reader.addEventListener('load', function (evt) {\n        WORKER.postMessage('generate_markov', evt.target.result);\n    });\n    WORKER.registerCallback('generate_markov', hideSpinner);\n\n    reader.readAsText(file);\n    MAAS_CONSOLE.log(`load file ${file.name}`);\n\n    function hideSpinner() {\n        spinner.classList.remove('show');\n        button.disabled = false;\n\n        WORKER.removeCallback('generate_markov', hideSpinner);\n    }\n});\n\ndocument.querySelector('#generate-text-btn').addEventListener('click', function() {\n    let numberOfWords = parseInt(document.querySelector('#number-of-words').value, 10);\n\n    WORKER.postMessage('generate_text', numberOfWords);\n});\n\n(function (fileInput) {\n    let labelElement = document.querySelector('label[for=\"input-text\"]'),\n        generateTextButton = document.querySelector('#generate-text-btn'),\n        originallabelText = labelElement.innerHTML;\n\n    fileInput.addEventListener('change', function(evt) {\n        let file = fileInput.files[0];\n\n        generateTextButton.disabled = true;\n\n        if (labelElement) {\n            let text = originallabelText;\n\n            if (file) {\n                text = file.name;\n            }\n\n            labelElement.innerHTML = text;\n        }\n    });\n\n    if (fileInput.files[0]) {\n        labelElement.innerHTML = fileInput.files[0].name;\n    }\n}(document.querySelector('#input-text')));\n\n\ndocument.querySelectorAll('.srv-resource').forEach(function (element) {\n    async function loadResource(evt) {\n        let url = evt.target.getAttribute('data-href'),\n            response = await fetch(url),\n            button = evt.target,\n            spinner = button.querySelector('span');\n\n        button.disabled = true;\n        spinner.classList.add('show');\n        MAAS_CONSOLE.log(`download file ${url}`);\n        WORKER.postMessage('generate_markov', await response.text());\n        WORKER.registerCallback('generate_markov', hideSpinner);\n\n        function hideSpinner() {\n            spinner.classList.remove('show');\n            button.disabled = false;\n\n            WORKER.removeCallback('generate_markov', hideSpinner);\n        }\n    }\n\n    element.addEventListener('click', loadResource);\n});\n\nWORKER.registerCallback('generate_text', function (_type, payload) {\n    document.querySelector('#generate-text-output').innerHTML = payload.replace(/\\n/g, '<br />\\n');\n});\n\nWORKER.registerCallback('generate_markov', function (_type, _payload) {\n    document.querySelector('#generate-text-btn').disabled = false;\n});\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);